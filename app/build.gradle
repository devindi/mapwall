apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.vanniktech.android.apk.size'
apply plugin: "org.sonarqube"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'jacoco'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-kapt'

def fabricKey = resolveProperty('fabricKey')
def googleKey = resolveProperty('googleKey')
def thunderforestKey = resolveProperty('thunderforest')

if (fabricKey != null) {
    apply plugin: 'io.fabric'
}

def version = '0.1.1'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.devindi.wallpaper"
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 2
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [fabricKey       : "$fabricKey",
                                googleKey       : "$googleKey",
                                thunderforestKey: "$thunderforestKey"]
    }


    signingConfigs {
        //I wouldn't override default debug config
        debugg {
            storeFile rootProject.file("files/debug.jks")
            storePassword 'mapwall'
            keyAlias 'debug-key'
            keyPassword 'mapwall'
        }
    }
    if (rootProject.file('signing.gradle').exists()) {
        println 'Applying release signing'
        apply from: "${rootProject.file('signing.gradle')}", to: android
    } else {
        println 'Failed to apply release signing'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            signingConfig signingConfigs.debugg
            testCoverageEnabled true
        }

        debugProguard {
            initWith debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            matchingFallbacks = ['debug']
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.properties.get('names').collect().contains('release')) {
                signingConfig signingConfigs.release
                println 'Using \'release\' signing config for release build'
            } else {
                signingConfig signingConfigs.debug
                println 'Using default signing config for release build'
            }
        }
    }

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        animationsDisabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectVersion", version
        property "sonar.host.url", resolveProperty('sonarUrl')
        property "sonar.login", resolveProperty('sonarKey')
    }
}

ktlint {
    version = "0.28.0"
    android = true
    reporters = ["CHECKSTYLE"]
    ignoreFailures = true
    verbose = true
}

jacoco {
    toolVersion = '0.8.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.bluelinelabs:conductor:2.1.5'
    implementation 'com.bluelinelabs:conductor-archlifecycle:2.1.5'

    implementation 'org.osmdroid:osmdroid-android:6.0.1'

    implementation 'org.koin:koin-android-viewmodel:1.0.0'

    implementation 'com.jakewharton.timber:timber:4.7.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }

    implementation 'com.google.android.gms:play-services-places:17.0.0'

    implementation 'com.google.firebase:firebase-perf:19.0.4'

    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'androidx.room:room-runtime:2.2.3'
    kapt 'androidx.room:room-compiler:2.2.3'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'
    testImplementation "org.robolectric:robolectric:3.8"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "org.koin:koin-test:1.0.0"
}

apply plugin: 'com.google.gms.google-services'

def resolveProperty(String key) {
    if (hasProperty(key)) return findProperty(key)
    if (!project.rootProject.file('local.properties').exists()) return null
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(key)
}

task createTestReports(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def javaSourceDirs = ["${project.projectDir}/src/main/java"]

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    sourceDirectories = files(javaSourceDirs)
    classDirectories = files([javaClasses], [kotlinClasses])
    executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])
}
